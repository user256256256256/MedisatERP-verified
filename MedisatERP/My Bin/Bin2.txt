@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.CoreSystem.Models
@model MedisatERP.Areas.CoreSystem.Views.IndexModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Company Info";
}

<style>
    .lbl_header {
        margin-bottom: 10px;
        margin-top: 10px;
    }

    .company-logo {
        max-width: 100px;
        max-height: 100px;
    }
</style>

<!-- Section Title Card -->
<div class="card col-12 text-white" style="margin-bottom:20px;padding:20px;background: linear-gradient(to top, #6f42c1, #9b6bd3);">
    <center><span><i data-feather="users"></i> COMPANY INFORMATION</span></center>
</div>
<div class="card" style="padding:20px">
    @(Html.DevExtreme().DataGrid<Company>()
            .ShowBorders(true)
            .ID("gv_companyList")
            .DataSource(d => d.Mvc().Controller("CompaniesAPI").LoadAction("Get").Key("CompanyId")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete"))
            .ShowColumnLines(false)
            .ShowRowLines(true)
            .RowAlternationEnabled(true)
            .ColumnHidingEnabled(true)
            .ColumnAutoWidth(true)
            .OnFocusedRowChanged("onMainRowChanged")
            .OnInitNewRow("intiateNewCompany")
            .Columns(columns =>
            {
                columns.AddFor(m => m.CompanyName);
                columns.AddFor(m => m.CreatedAt).Format("dd MMM, yyyy").AllowEditing(false);
                columns.AddFor(m => m.ExpDate).Format("dd MMM, yyyy");
                columns.AddFor(m => m.CompanyEmail);
                columns.AddFor(m => m.CompanyPhone);
                columns.AddFor(m => m.Motto);
                columns.AddFor(m => m.CompanyType);
                columns.AddFor(m => m.ContactPerson);
                columns.AddFor(m => m.CompanyInitials);
                columns.AddFor(m => m.PayAccount);
                columns.AddFor(m => m.PayAccountName);
                columns.AddFor(m => m.PayBank);
                columns.AddFor(m => m.SmsAccount);
                columns.AddFor(m => m.SubscriptionAmount);

                // Add custom column for Company Logo
                columns.Add()
            .Caption("Company Logo")
            .CellTemplate(@<text>
        @{
        var company = item as MedisatERP.Areas.CoreSystem.Models.Company;
        if (company != null && company.CompanyLogo != null)
        {
            <img src="data:image/png;base64,@Convert.ToBase64String(company.CompanyLogo)" class="company-logo" />
        }
        else
        {
            <span>No logo available</span>
        }
        }
    </text>);

                // Add column for Address --a foreign key in Company Model
                columns.AddFor(m => m.Address.Street);
                columns.AddFor(m => m.Address.City);
                columns.AddFor(m => m.Address.State);
                columns.AddFor(m => m.Address.PostalCode);
                columns.AddFor(m => m.Address.Country);

                // Manage Button Column (for Edit/Delete)
                columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(80)
    .Caption("Manage")
    .Name("ManageButton")
    .Buttons(b =>
    {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
            })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Company Profile")
        .Height(550)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f.Items(items =>
        {

            // Group 1: Company Information
            items.AddGroup()
            .Caption("Company Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.CompanyName).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyStatus).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyInitials).Visible(true);
                groupItems.AddSimpleFor(m => m.Motto).Visible(true);
                groupItems.AddSimpleFor(m => m.CreatedAt).Visible(true);
                groupItems.AddSimpleFor(m => m.ExpDate).Visible(true);
            });

            // Group 2: Contact Information
            items.AddGroup()
            .Caption("Contact Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.ContactPerson).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyEmail).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyPhone).Visible(true);
                groupItems.AddSimpleFor(m => m.SmsAccount).Visible(true);
            });

            // Group 3: Payment & Account Information
            items.AddGroup()
            .Caption("Payment & Account Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.SubscriptionAmount).Visible(true);
                groupItems.AddSimpleFor(m => m.PayAccount).Visible(true);
                groupItems.AddSimpleFor(m => m.PayAccountName).Visible(true);
                groupItems.AddSimpleFor(m => m.PayBank).Visible(true);
            });

            // Group 4: Company Logo
            items.AddGroup()
            .Caption("Company Logo")
            .ColCount(1)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.CompanyLogo).Visible(true);
            });

            // Group 5: Company Address
            items.AddGroup()
            .Caption("Company Address")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.Address.AddressId).Visible(false);
                groupItems.AddSimpleFor(m => m.Address.Street).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.City).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.State).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.PostalCode).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.Country).Visible(true);
            });

        }))
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.CompanyName).SummaryType(SummaryType.Count);
        })
        )
        )
</div>

<script>

    $(function () {
        // Initialize the DataGrid
        $('#gv_companyList').dxDataGrid({
            onDataSourceChanged: function (e) {
                // This event is triggered when data is loaded or changed
                console.log("DataSource changed: ", e.component.option("dataSource"));
            }
        });
    });

    function onMainRowChanged(e) {
        console.log("Focused Row Changed:", e);
        // Add console log to track the specific data of the focused row
        console.log("Focused Row Data:", e.row.data);

        // Specifically log the Address data of the selected row
        var focusedRow = e.row.data;
        if (focusedRow && focusedRow.Address) {
            console.log("Address Data:", focusedRow.Address);
        }
    }

    function intiateNewCompany(e) {
        console.log("New Company Created:", e);
        var company = e.data; // Capture the company data

        // Specifically log the address fields when creating a new company
        if (company.Address) {
            console.log("New Address Data:", company.Address);
        }

        // If AddressId is missing or invalid, log a message
        if (!company.AddressId) {
            console.log("Address ID is missing, creating new address...");
        }
    }

   

    // $(function () {
    //     Initialize the DataGrid
    //     $('#gv_companyList').dxDataGrid({
    //         onDataSourceChanged: function (e) {
    //             This event is triggered when data is loaded or changed
    //             console.log("DataSource changed: ", e.component.option("dataSource"));
    //         }
    //     });
    // });

    // function onMainRowChanged(e) {
    //     console.log("Focused Row Changed:", e);
    //     Add console log to track the specific data of the focused row
    //     console.log("Focused Row Data:", e.row.data); 
    // }

    // function intiateNewCompany(e) {
    //     console.log("New Company Created:", e);
    //     var company = e.data; Capture the company data
    // }

    // For debugging purposes, when you load the data, log it
    // function logAddressData() {
        // Assuming the data is already available at this point in the grid
    //     var gridData = $('#gv_companyList').dxDataGrid('instance').option('dataSource');
    //     console.log("Grid Data:", gridData);
    // }

    // Call logAddressData after the DataGrid is initialized to inspect its data
    // $(document).ready(function() {
    //     logAddressData();
    // });


    // $(function () {
    //     Initialize the DataGrid
    //     $('#gv_companyList').dxDataGrid();
    // });

    // function onMainRowChanged(e) {
    //     console.log("Focused Row Changed:", e);
    // }

//     function intiateNewCompany(e) {
//         console.log("New Company Created:", e);
//         var company = e.data; Capture the company data

//         If AddressId is not provided, trigger address creation
//         if (!company.AddressId) {
//             console.log("Address ID is missing, creating new address...");
//         }
//     }

</script>




<div class="main-content">
    <section class="section">
        <div class="section-header">
            <h1>Profile</h1>
        </div>

        <div class="section-body">
            <h2 class="section-title">Hi, @Model.User.</h2> <!-- Dynamically display the User Name -->
            <p class="section-lead">Change information about yourself on this page.</p>

            <div class="row mt-sm-4">
                <!-- Profile Section (Using DevExtreme Card and Image) -->
                <div class="col-12 col-md-12 col-lg-5">
                    <div class="card profile-widget">
                        <div class="profile-widget-header">
                            <img alt="image" src="~/img/userProfileImages/@Model.UserProfile.ProfileImagePath" class="rounded-circle profile-widget-picture" style="width: 100px; height: 100px;">
                        </div>
                        <div class="card-body">
                            <!-- Dynamically Display User Name, Phone Number, and Role -->
                            <p>User Name: <span>@Model.UserProfile.User.UserName</span></p> <!-- Dynamically bind User Name -->
                            <p>Phone Number: <span>@Model.UserProfile.User.PhoneNumber</span></p> <!-- Dynamically bind Phone Number -->
                            <p>Role: <span>@Model.UserProfile.User.UserRoles.FirstOrDefault()?.Role.Name</span></p> <!-- Dynamically bind User Role -->
                            <!-- Bio Section (Dynamically Displayed) -->
                            <div class="font-weight-bold">Bio <span class="text-muted">@Model.UserProfile.UserBio</span></div> <!-- Dynamically bind Bio -->
                            <p>@Model.UserProfile.UserBio</p> <!-- Dynamically bind full Bio content -->
                        </div>
                    </div>
                </div>

                <!-- Edit Profile Section (Using DevExtreme Controls) -->
                <div class="col-12 col-md-12 col-lg-7">
                    <div class="card">
                        <form method="post" class="needs-validation" novalidate="">
                            <div class="card-header">
                                <h4>Edit Profile</h4>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <!-- First Name Field -->
                                    <div class="form-group col-md-6 col-12">
                                        <label>First Name</label>
                                        @Html.DevExtreme().TextBoxFor(m => m.UserProfile.FirstName)
                                        .Value(Model.UserProfile.FirstName)
                                        .IsRequired(true)
                                        .Placeholder("Enter First Name")
                                        .CssClass("form-control")
                                    </div>
                                    <!-- Last Name Field -->
                                    <div class="form-group col-md-6 col-12">
                                        <label>Last Name</label>
                                        @Html.DevExtreme().TextBoxFor(m => m.UserProfile.LastName)
                                        .Value(Model.UserProfile.LastName)
                                        .IsRequired(true)
                                        .Placeholder("Enter Last Name")
                                        .CssClass("form-control")
                                    </div>
                                </div>

                                <div class="row">
                                    <!-- Email Field -->
                                    <div class="form-group col-md-7 col-12">
                                        <label>Email</label>
                                        @Html.DevExtreme().TextBoxFor(m => m.UserProfile.User.Email)
                                        .Value(Model.UserProfile.User.Email)
                                        .IsRequired(true)
                                        .Placeholder("Enter Email")
                                        .CssClass("form-control")
                                    </div>

                                    <!-- Phone Field -->
                                    <div class="form-group col-md-5 col-12">
                                        <label>Phone</label>
                                        @Html.DevExtreme().TextBoxFor(m => m.UserProfile.User.PhoneNumber)
                                        .Value(Model.UserProfile.User.PhoneNumber)
                                        .CssClass("form-control")
                                    </div>
                                </div>

                                <div class="row">
                                    <!-- Bio Field (Text Area) -->
                                    <div class="form-group col-12">
                                        <label>Bio</label>
                                        @Html.DevExtreme().TextAreaFor(m => m.UserProfile.UserBio)
                                        .Value(Model.UserProfile.UserBio)
                                        .Height(100)
                                        .IsRequired(true)
                                        .CssClass("form-control")
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-right">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>


@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.CoreSystem.Models
@using MedisatERP.Models

<!-- Inheriting the System Administrator layout  -->
@{
    Layout = "_Layout";
    ViewData["Title"] = "Company Info";
}

<!-- Section Title Card -->
<div class="card col-12 card-title">
    <center><span><i data-feather="briefcase"></i> COMPANY INFORMATION</span></center>
</div>

<div class="card" style="padding:20px">
    @(
        Html.DevExtreme().DataGrid<Company>()
                .ShowBorders(true)
                .ID("gv_companyList")
                .DataSource(d => d.Mvc().Controller("CompaniesAPI").LoadAction("Get").Key("CompanyId")
                .InsertAction("Post")
                .UpdateAction("Put")
                .DeleteAction("Delete"))
                .ShowColumnLines(false)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .FilterRow(f => f.Visible(false))
                .HeaderFilter(f => f.Visible(true))
                .RemoteOperations(true)
                .ColumnHidingEnabled(true)
                .ColumnAutoWidth(true)
                .OnFocusedRowChanged("onMainRowChanged")
                .OnInitNewRow("intiateNewCompany")
                .Columns(columns =>
                {
                    // Company Data Columns
                    columns.AddFor(m => m.CompanyId).Visible(false);
                    columns.AddFor(m => m.CompanyName);
            columns.AddFor(m => m.CreatedAt).Format("dd MMM, yyyy").AllowEditing(false);
            columns.AddFor(m => m.ExpDate).Format("dd MMM, yyyy");
            columns.AddFor(m => m.CompanyEmail);
            columns.AddFor(m => m.CompanyPhone);
            columns.AddFor(m => m.Motto);
            columns.AddFor(m => m.CompanyType);
            columns.AddFor(m => m.ContactPerson);
            columns.AddFor(m => m.CompanyInitials);
            columns.AddFor(m => m.PayAccount);
            columns.AddFor(m => m.PayAccountName);
            columns.AddFor(m => m.PayBank);
            columns.AddFor(m => m.SmsAccount);
            columns.AddFor(m => m.SubscriptionAmount);
            
            //columns.AddFor(m => m.CompanyLogoFilePath);

            // Display companyLogoFilePath as an img
            columns.Add().Caption("Company Logo").DataField("CompanyLogoFilePath")
    .CellTemplate(@<text>
        <img src="~/img/companyLogoImages/LyfexAfricaLogo.png" alt="Company Logo" style="max-width: 100px; max-height: 100px;"/>
    </text>);


            // Add column for Address --a foreign key in Company Model
            columns.AddFor(m => m.Address.Street);
            columns.AddFor(m => m.Address.City);
            columns.AddFor(m => m.Address.State);
            columns.AddFor(m => m.Address.PostalCode);
            columns.AddFor(m => m.Address.Country);

            // Profile popup
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Caption("Profile")
            .Buttons(b =>
            {
                b.Add()
            .Hint("Click for details")
            .Icon("mediumiconslayout")
            .Visible(true)
            .OnClick("showCompProfile");
            });

            // Manage Button Column (for Edit/Delete)
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Caption("Manage")
            .Name("ManageButton")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
            })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Company Profile")
        .Height(550)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f.Items(items =>
        {

            // Group 1: Company Information
            items.AddGroup()
            .Caption("Company Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.CompanyName).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyStatus).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyInitials).Visible(true);
                groupItems.AddSimpleFor(m => m.Motto).Visible(true);
                groupItems.AddSimpleFor(m => m.CreatedAt).Visible(true);
                groupItems.AddSimpleFor(m => m.ExpDate).Visible(true);
            });

            // Group 2: Contact Information
            items.AddGroup()
            .Caption("Contact Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.ContactPerson).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyEmail).Visible(true);
                groupItems.AddSimpleFor(m => m.CompanyPhone).Visible(true);
                groupItems.AddSimpleFor(m => m.SmsAccount).Visible(true);
            });

            // Group 3: Payment & Account Information
            items.AddGroup()
            .Caption("Payment & Account Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.SubscriptionAmount).Visible(true);
                groupItems.AddSimpleFor(m => m.PayAccount).Visible(true);
                groupItems.AddSimpleFor(m => m.PayAccountName).Visible(true);
                groupItems.AddSimpleFor(m => m.PayBank).Visible(true);
            });

            // Group 4: Company Logo
            items.AddGroup()
            .Caption("Company Logo")
            .ColCount(1)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.CompanyLogoFilePath).Visible(true);
            });

            // Group 5: Company Address
            items.AddGroup()
            .Caption("Company Address")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.Address.AddressId).Visible(false);
                groupItems.AddSimpleFor(m => m.Address.Street).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.City).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.State).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.PostalCode).Visible(true);
                groupItems.AddSimpleFor(m => m.Address.Country).Visible(true);
            });

        }))
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.CompanyName).SummaryType(SummaryType.Count);
        })
        )
        )
</div>

<!-- This is the general popup --it shows when the user clicks the profile button  -->
@using (Html.DevExtreme().NamedTemplate("embedded_comp_profile"))
{
    @(Html.DevExtreme().TabPanel()  // Create a TabPanel widget
            .DeferRendering(false)  // Disables deferred rendering (loads all tabs at once)
                .Height("auto")  // Automatically adjusts the height of the TabPanel
            .ScrollingEnabled(true) // Enable scrolling
            .Items(tab =>  // Define tabs for the TabPanel
            {
                tab.Add()  // Add the first tab
                    .Title("CLIENTS")  // Set the title of the tab
                    .Icon("columnchooser")  // Set the icon for the tab
                    .Template(new TemplateName("embedded_clients"));  // Set the template for the tab content

                tab.Add()  // Add the second tab
                    .Title("SUBSCRIPTION")  // Set the title of the tab
                    .Icon("bulletlist")  // Set the icon for the tab
                    .Template(new TemplateName("embedded_new_payment"));  // Set the template for the tab content

                tab.Add()  // Add the third tab
                    .Title(" NEW JOURNAL VOUCHER")  // Set the title of the tab
                    .Icon("paste")  // Set the icon for the tab
                    .Template(new TemplateName("embedded_new_journal"));  // Set the template for the tab content
            })
        )
}

@using (Html.DevExtreme().NamedTemplate("embedded_clients"))
{
    @(Html.DevExtreme().DataGrid<CompanyClient>()  // Create a DataGrid for displaying Company Clients
            .ShowBorders(true)  // Show borders around the grid
            .ID("gv_clientList")  // Set the ID of the grid
            .DataSource(d => d.Mvc().Controller("CompanyClientsAPI").LoadAction("Get").Key("ClientId")  // Set the data source for the grid
                .InsertAction("Post")  // Define the insert action for the grid
                .UpdateAction("Put")  // Define the update action for the grid
                .DeleteAction("Delete")  // Define the delete action for the grid
                .LoadParams(new { CompanyId = new JS("getCompanyId") }))  // Pass the CompanyId to the API as a load parameter
                
            .ShowColumnLines(false)  // Disable column lines
            .ShowRowLines(false)  // Enable row lines
            .RowAlternationEnabled(true)  // Enable row alternation (striped rows)
            .FilterRow(f => f.Visible(false))  // Hide the filter row
            .HeaderFilter(f => f.Visible(true))  // Enable header filtering
            
            .RemoteOperations(true)  // Enable remote operations (for paging, sorting, etc.)

            .ShowBorders(false)  // Hide borders around the grid
            .ColumnHidingEnabled(true)  // Enable column hiding
            .ColumnAutoWidth(true)  // Enable automatic column width adjustment
            .OnFocusedRowChanged("onMainRowChanged")  // Set the event handler for focused row change
            .Columns(columns =>  // Define columns for the grid
            {
                // Company Clients Data Columns
                columns.AddFor(m => m.ClientId).Caption("Client ID").Visible(false);  // Hidden column for ClientId
                columns.AddFor(m => m.ClientName).Caption("Client Name").Visible(true);  // Visible column for ClientName
                columns.AddFor(m => m.DateOfBirth).Caption("Date of Birth").Format("dd MMM, yyyy");  // Format Date of Birth column
                columns.AddFor(m => m.Gender).Caption("Gender").Visible(true);  // Visible column for Gender
                columns.AddFor(m => m.Email).Caption("Email").Visible(true);  // Visible column for Email
                columns.AddFor(m => m.PhoneNumber).Caption("Phone").Visible(true);  // Visible column for Phone Number
                columns.AddFor(m => m.EmergencyContactName).Caption("Emergency Contact Name").Visible(true);  // Visible column for Emergency Contact Name
                columns.AddFor(m => m.EmergencyContactPhone).Caption("Emergency Contact Phone").Visible(true);  // Visible column for Emergency Contact Phone
                columns.AddFor(m => m.MaritalStatus).Caption("Marital Status").Visible(true);  // Visible column for Marital Status
                columns.AddFor(m => m.Nationality).Caption("Nationality").Visible(true);  // Visible column for Nationality
                columns.AddFor(m => m.CreatedAt).Caption("Date Created").Format("dd MMM, yyyy").AllowEditing(false);  // Format CreatedAt column, disable editing

                // Add column for Client Address -- a foreign key in Company Clients Model
                columns.AddFor(m => m.AddressId).Caption("Address ID").Visible(false);  // Hidden column for Address ID
                columns.AddFor(m => m.Address.Street).Caption("Street").Visible(true);  // Visible column for Street address
                columns.AddFor(m => m.Address.City).Caption("City").Visible(true);  // Visible column for City
                columns.AddFor(m => m.Address.State).Caption("State").Visible(true);  // Visible column for State
                columns.AddFor(m => m.Address.PostalCode).Caption("Postal Code").Visible(true);  // Visible column for Postal Code
                columns.AddFor(m => m.Address.Country).Caption("Country").Visible(true);  // Visible column for Country
            })
            .Selection(s => s.Mode(SelectionMode.Multiple))  // Enable multiple row selection
            .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))  // Enable search panel
            .FocusedRowEnabled(true)  // Enable focused row
            .Paging(p => p.PageSize(10))  // Enable paging with page size of 10
            .RemoteOperations(true)  // Enable remote operations (for paging, sorting, etc.)
            .Summary(s => s  // Configure summary row
                .TotalItems(totalItems =>  // Configure total items summary
                {
                    totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);  // Count the number of clients
                })
            )
        )
}

@(Html.DevExtreme().Popup()  // Create a popup for new user account
    .ID("pop_comp_profile")  // Set ID of the popup
    .Width("50%")  // Set width of the popup
    .Height("450")  // Set height of the popup
    
    .ShowTitle(true)  // Show title in the popup
    //.ShadingColor("Purple")
    .Title("Company Profile")  // Set title of the popup
    .Visible(false)  // Initially hide the popup
    .ShowCloseButton(true)  // Show close button
    .DragEnabled(true)  // Disable dragging of the popup
    .DeferRendering(false)  // Disable deferred rendering for the popup content
    .OnContentReady(@<text>
    function(e){
    const template = $('#embedded_comp_profile');  // Select the embedded template
    e.component.option('contentTemplate',template);  // Set the popup content template
    }
</text>)
)


<script>

    let compoId = "";  // Variable to hold the CompanyId

    $(function () {
        // Initialize DataGrid component for company list
        $('#gv_companyList').dxDataGrid({
            // Any additional setup code for DataGrid can be added here
        });
    });

    // Event handler for focused row change
    function onMainRowChanged(e) {

        // Handle logic when the focused row changes (currently no logging)
        const rowData = e.row && e.row.data;
        compoId = rowData.CompanyId;  // Save the CompanyId of the focused row
        const grid = $('#gv_clientList').dxDataGrid('instance');  // Refresh the client list grid
        grid.refresh();
    }

    function getCompanyId() {
        return compoId;  // Return the stored CompanyId
    }

    // Event handler for initiating a new company
    function intiateNewCompany(e) {
        // Handle the initialization of new company (currently no logging)
        var company = e.data;
        if (!company.AddressId) {
            // Address ID missing, can trigger further actions if necessary
        }
    }

    function showCompProfile() {
        const popup = $('#pop_comp_profile').dxPopup('instance');  // Get the popup instance
        popup.show();  // Show the popup
    }

</script>


#5bc14c
#208611
#3a1670
#6610f2
#311465

/*#3B3D55; #6f42c1, #311465*/



Sure! In the relationship we defined, each user (represented by the AspNetUser model) 
can belong to a company, identified by the CompanyId. This is a one-to-many relationship, meaning one company can have many users, 
but a user can belong to only one company or none at all if they are, for example, a system administrator.

For instance, imagine a company called "Healthy Eats". This company can have multiple users, such as nutritionists and managers, 
associated with it. Each user in the "Healthy Eats" company will have the CompanyId of "Healthy Eats". Conversely, the 
"Healthy Eats" company will have a list of users who belong to it. However, a system administrator, 
who oversees multiple companies, would not have a CompanyId and thus is not restricted to any specific company.


    private readonly MedisatErpDbContext _context;
    private readonly UserManager<IdentityUser> _userManager;
    private readonly RoleManager<AspNetRole> _roleManager;

    public AspNetUsersAPIController(MedisatErpDbContext context, UserManager<IdentityUser> userManager, RoleManager<AspNetRole> roleManager)
    {
        _context = context;
        _userManager = userManager;
        _roleManager = roleManager;
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] AspNetUser userInput)
    {
        // Step 1: Map AspNetUser to IdentityUser
        var identityUser = new IdentityUser
        {
            UserName = userInput.UserName,
            Email = userInput.Email,
            PhoneNumber = userInput.PhoneNumber,
        };

        // Step 2: Hash the password
        var passwordHasher = new PasswordHasher<IdentityUser>();
        identityUser.PasswordHash = passwordHasher.HashPassword(identityUser, userInput.Password);

        // Step 3: Create the user using UserManager
        var createResult = await _userManager.CreateAsync(identityUser);
        if (!createResult.Succeeded)
        {
            return BadRequest(createResult.Errors);
        }

        // Step 4: Handle Role Assignment (Hybrid approach)
        if (!string.IsNullOrEmpty(userInput.Roles?.FirstOrDefault()?.Name))
        {
            var roleName = userInput.Roles.FirstOrDefault()?.Name; // Get the role name
            var role = await _context.AspNetRoles.FirstOrDefaultAsync(r => r.Name == roleName); // Find the role in the database

            if (role != null)
            {
                // Assign the role to the user using UserManager
                var addRoleResult = await _userManager.AddToRoleAsync(identityUser, role.Name);
                if (!addRoleResult.Succeeded)
                {
                    return BadRequest("Failed to assign role.");
                }
            }
            else
            {
                // If the role doesn't exist, return an error
                return NotFound($"Role '{roleName}' not found.");
            }
        }

        // Step 5: Map additional properties from AspNetUser (Optional)
        // This depends on whether you want to store extra fields from AspNetUser (like FullName, etc.)
        // You can also add custom logic to store additional data in your user model if needed.
        
        // For example, if you have a 'FullName' field in AspNetUser:
        // identityUser.FullName = userInput.FullName;
        // _context.SaveChangesAsync();

        // Step 6: Return the newly created user ID
        return Json(new { Id = identityUser.Id });
    }
}


[HttpPost]
        public async Task<IActionResult> Post([FromBody] AspNetUser userInput)
        {
            try
            {
                // Log the content of the incoming request for debugging
                if (userInput == null)
                {
                    Console.WriteLine("Received user input: null");
                    return BadRequest("User input cannot be null.");
                }

                var userInputJson = JsonConvert.SerializeObject(userInput, Formatting.Indented);
                Console.WriteLine($"Received user input: {userInputJson}");

                // Create an IdentityUser instance for UserManager
                var identityUser = new IdentityUser
                {
                    UserName = userInput.UserName,
                    Email = userInput.Email,
                    PhoneNumber = userInput.PhoneNumber,
                };

                // Password hashing
                var passwordHasher = new PasswordHasher<IdentityUser>();
                identityUser.PasswordHash = passwordHasher.HashPassword(identityUser, userInput.PasswordHash);

                // Create the user using _userManager
                var createResult = await _userManager.CreateAsync(identityUser);
                if (!createResult.Succeeded)
                {
                    return BadRequest(createResult.Errors);
                }

                // Handle roles if provided in the user input
                if (userInput.Roles != null && userInput.Roles.Any())
                {
                    foreach (var roleObject in userInput.Roles)
                    {
                        // Assuming each role is an object with an Id property (of type Guid)
                        if (roleObject == null || roleObject.Id == null)
                        {
                            Console.WriteLine($"Invalid Role object: {roleObject}");
                            return BadRequest("Invalid Role object.");
                        }

                        var roleId = roleObject.Id;

                        // Find the role in the database by role ID (Guid)
                        var roleFromDb = await _context.AspNetRoles
                            .FirstOrDefaultAsync(r => r.Id == roleId);

                        if (roleFromDb != null)
                        {
                            // Ensure roleFromDb.Name is a string and assign the role to the user
                            var roleName = roleFromDb.Name;

                            var addRoleResult = await _userManager.AddToRoleAsync(identityUser, roleName);

                            if (!addRoleResult.Succeeded)
                            {
                                Console.WriteLine("Role assignment failed. Returning BadRequest.");
                                return BadRequest("Failed to assign role.");
                            }

                            Console.WriteLine($"Role '{roleName}' assigned successfully.");
                        }
                        else
                        {
                            // If the role doesn't exist, return an error
                            Console.WriteLine($"Role with ID '{roleId}' not found.");
                            return NotFound($"Role with ID '{roleId}' not found.");
                        }
                    }
                }

                // Handle the company ID if provided
                if (userInput.CompanyId.HasValue)
                {
                    // Update the CompanyId in the user record if it's provided
                    var userFromDb = await _context.AspNetUsers
                        .FirstOrDefaultAsync(u => u.UserName == identityUser.UserName);

                    if (userFromDb != null)
                    {
                        userFromDb.CompanyId = userInput.CompanyId; // Assign the CompanyId from userInput
                        await _context.SaveChangesAsync(); // Save changes to the database
                        Console.WriteLine($"Company Id '{userFromDb.CompanyId}' assigned successfully.");
                    }
                }

                return Json(new { Id = identityUser.Id });
            }
            catch (Exception ex)
            {
                // Log the exception message and stack trace for debugging purposes
                Console.WriteLine($"An error occurred: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return StatusCode(500, new { message = "An internal server error occurred.", error = ex.Message });
            }
        }



        [HttpPost]
        public async Task<IActionResult> Post([FromBody] AspNetUser userInput)
        {
            try
            {
                // Log the content of the incoming request for debugging
                if (userInput == null)
                {
                    Console.WriteLine("Received user input: null");
                    return BadRequest("User input cannot be null.");
                }

                var userInputJson = JsonConvert.SerializeObject(userInput, Formatting.Indented);
                Console.WriteLine($"Received user input: {userInputJson}");

                // Handle roles if provided in the user input
                if (userInput.Roles != null && userInput.Roles.Any())
                {
                    foreach (var roleObject in userInput.Roles)
                    {
                        // Assuming each role is an object with an Id property (of type Guid)
                        if (roleObject == null || roleObject.Id == null)
                        {
                            Console.WriteLine($"Invalid Role object: {roleObject}");
                            return BadRequest("Invalid Role object.");
                        }

                        var roleId = roleObject.Id;

                        // Find the role in the database by role ID (Guid)
                        var roleFromDb = await _context.AspNetRoles
                            .FirstOrDefaultAsync(r => r.Id == roleId);

                        if (roleFromDb == null)
                        {
                            // If the role doesn't exist, return an error
                            Console.WriteLine($"Role with ID '{roleId}' not found.");
                            return NotFound($"Role with ID '{roleId}' not found.");
                        }
                    }
                }

                // Create an IdentityUser instance for UserManager only after role checks
                var identityUser = new IdentityUser
                {
                    UserName = userInput.UserName,
                    Email = userInput.Email,
                    PhoneNumber = userInput.PhoneNumber,
                };

                // Password hashing
                var passwordHasher = new PasswordHasher<IdentityUser>();
                identityUser.PasswordHash = passwordHasher.HashPassword(identityUser, userInput.PasswordHash);

                // Create the user using _userManager
                var createResult = await _userManager.CreateAsync(identityUser);
                if (!createResult.Succeeded)
                {
                    return BadRequest(createResult.Errors);
                }

                // Handle roles after user is created
                if (userInput.Roles != null && userInput.Roles.Any())
                {
                    foreach (var roleObject in userInput.Roles)
                    {
                        var roleId = roleObject.Id;

                        // Find the role in the database by role ID (Guid)
                        var roleFromDb = await _context.AspNetRoles
                            .FirstOrDefaultAsync(r => r.Id == roleId);

                        if (roleFromDb != null)
                        {
                            var roleName = roleFromDb.Name;
                            var addRoleResult = await _userManager.AddToRoleAsync(identityUser, roleName);

                            if (!addRoleResult.Succeeded)
                            {
                                // If role assignment fails, delete the created user and return an error
                                await _userManager.DeleteAsync(identityUser);
                                Console.WriteLine("Role assignment failed. User deleted.");
                                return BadRequest("Failed to assign role.");
                            }

                            Console.WriteLine($"Role '{roleName}' assigned successfully.");
                        }
                    }
                }

                // Handle the company ID if provided
                if (userInput.CompanyId.HasValue)
                {
                    // Update the CompanyId in the user record if it's provided
                    var userFromDb = await _context.AspNetUsers
                        .FirstOrDefaultAsync(u => u.UserName == identityUser.UserName);

                    if (userFromDb != null)
                    {
                        userFromDb.CompanyId = userInput.CompanyId; // Assign the CompanyId from userInput
                        await _context.SaveChangesAsync(); // Save changes to the database
                        Console.WriteLine($"Company Id '{userFromDb.CompanyId}' assigned successfully.");
                    }
                }

                return Json(new { Id = identityUser.Id });
            }
            catch (Exception ex)
            {
                // Log the exception message and stack trace for debugging purposes
                Console.WriteLine($"An error occurred: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return StatusCode(500, new { message = "An internal server error occurred.", error = ex.Message });
            }
        }


        <div class="col-md-12 mb-3">
                <label>Feedbacks:</label>
                @(Html.DevExtreme().ListBox()
                .ID("list_feedbacks")
                .DataSource(ds => ds.Mvc()
                    .Controller("FeedbackAPI")
                    .LoadAction("GetFeedbacksForUser")
                    .Key("Id")
                    .LoadParams(new { userId = Model.Id }))
                .DisplayExpr("Content")
                .ValueExpr("Id")
                .Width("100%")
                .Height(200)
                )
          </div>



          Common Workflow in ASP.NET Identity:
Configure Lockout: You can configure the behavior of account lockouts in your Startup.cs file, under the ConfigureServices method, when setting up the Identity system. Example:

csharp
Copy code
services.AddIdentity<ApplicationUser, IdentityRole>(options =>
{
    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(15); // Set lockout duration
    options.Lockout.MaxFailedAccessAttempts = 5; // Set max failed attempts before lockout
    options.Lockout.AllowedForNewUsers = true; // Apply lockout to new users
})
.AddEntityFrameworkStores<ApplicationDbContext>()
.AddDefaultTokenProviders();
Checking Lockout: During a login attempt, the SignInManager will check if the account is locked by checking the LockoutEnabled and LockoutEnd fields. Example login check:

csharp
Copy code
var result = await signInManager.PasswordSignInAsync(user, password, false, true);
if (result.IsLockedOut)
{
    // Handle locked-out user scenario
}

More info
public async Task<SignInResult> SignInUserAsync(string username, string password)
{
    var user = await _userManager.FindByNameAsync(username);

    if (user == null)
    {
        return SignInResult.Failed;
    }

    // Check if the account is locked
    if (user.LockoutEnabled && user.AccessFailedCount >= 3)
    {
        return SignInResult.LockedOut;  // User is locked out after 3 failed attempts
    }

    var result = await _signInManager.PasswordSignInAsync(user, password, false, false);

    if (result.Succeeded)
    {
        // Reset failed count on successful login
        user.AccessFailedCount = 0;
        await _userManager.UpdateAsync(user);
        return SignInResult.Success;
    }
    else
    {
        // Increment failed attempt count on unsuccessful login
        user.AccessFailedCount++;
        if (user.AccessFailedCount >= 3)
        {
            user.LockoutEnd = DateTimeOffset.UtcNow.AddMinutes(15);  // Lockout for 15 minutes
            user.LockoutEnabled = true;
        }
        await _userManager.UpdateAsync(user);
        return SignInResult.Failed;
    }
}


services.Configure<IdentityOptions>(options =>
{
    options.Lockout.MaxFailedAccessAttempts = 3;  // Maximum number of failed attempts
    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(15);  // Lockout duration
    options.Lockout.AllowedForNewUsers = true;  // Lockout applies to new users as well
});


Handling Concurrency Conflicts:

If there is a conflict (the ConcurrencyStamp in the database doesn't match the ConcurrencyStamp in the update request), 
a DbUpdateConcurrencyException is thrown.
The application can catch this exception and handle it, often by prompting the user to reload the data and retry the operation.

try
{
    // Save changes to the user
    await _context.SaveChangesAsync();
}
catch (DbUpdateConcurrencyException)
{
    // Handle the concurrency exception, e.g., show an error message to the user
    ModelState.AddModelError(string.Empty, "The record you attempted to edit was modified by another user.");
}

