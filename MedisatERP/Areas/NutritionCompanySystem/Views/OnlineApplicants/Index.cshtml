@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.AdministratorSystem.Models
@using MedisatERP.Areas.NutritionCompanySystem.Models
@using MedisatERP.Models
@model AspNetUser
@{
    Layout = "_Layout";
    ViewData["Title"] = "Online Appointments";

    Guid? companyId = Model?.CompanyId;

    // If companyId is not available from the Model, use ViewData
    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }
}

<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="users"></i> ONLINE APPOINTMENTS</span></div>
</div>

<!-- Online Applicants DataGrid -->
<div class="card" style="padding:20px">
    @(Html.DevExtreme().DataGrid<OnlineApplicants>()
        .ShowBorders(true)
        .ID("gv_onlineApplicantList")
        .DataSource(d => d.Mvc().Controller("OnlineApplicantsAPI").LoadAction("Get").Key("Id"))
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .FilterRow(f => f.Visible(false))
        .HeaderFilter(f => f.Visible(true))
        .RemoteOperations(true)
        .ShowBorders(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .OnFocusedRowChanged("onMainRowChanged")
        .OnInitNewRow("onInitNewRow")
        .Columns(columns =>
        {
            // Applicant Info
            columns.AddFor(m => m.FirstName).Caption("First Name").Visible(true);
            columns.AddFor(m => m.LastName).Caption("Last Name").Visible(true);
            columns.AddFor(m => m.Email).Caption("Email").Visible(true);
            columns.AddFor(m => m.MobilePhoneNo).Caption("Mobile Phone").Visible(true);
            columns.AddFor(m => m.Address).Caption("Address").Visible(true);
            columns.AddFor(m => m.Age).Caption("Age").Visible(true);
            columns.AddFor(m => m.Reason).Caption("Reason").Visible(true);
            columns.AddFor(m => m.PreferredSchedule).Caption("Preferred Schedule").Format("dd MMM, yyyy").Visible(true);
            columns.AddFor(m => m.HowDidYouHearAboutUs).Caption("How Did You Hear About Us").Visible(true);
            columns.AddFor(m => m.AcceptPrivacyPolicies).Caption("Accepted Privacy Policies").Visible(true);
            columns.AddFor(m => m.CreatedDate).Caption("Created Date").Format("dd MMM, yyyy HH:mm:ss").Visible(true);

            // Manage Button Column (for Edit/Delete)
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Name("ManageButtons") // Add a unique name
            .Caption("Manage")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
                b.Add().Hint("Approve applicant to become a client").Icon("fas fa-check-circle").Visible(true).OnClick("approveApplicantAction");
                b.Add().Hint("Reject applicant from becoming a client").Icon("fas fa-times-circle").Visible(true).OnClick("rejectApplicantAction");
            });
        })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Online Applicant")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
            .Caption("Applicant Details")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.FirstName);
                groupItems.AddSimpleFor(m => m.LastName);
                groupItems.AddSimpleFor(m => m.Email);
                groupItems.AddSimpleFor(m => m.MobilePhoneNo);
                groupItems.AddSimpleFor(m => m.Address);
                groupItems.AddSimpleFor(m => m.Age);
                groupItems.AddSimpleFor(m => m.Reason);
                groupItems.AddSimpleFor(m => m.PreferredSchedule);
                groupItems.AddSimpleFor(m => m.HowDidYouHearAboutUs);
                groupItems.AddSimpleFor(m => m.AcceptPrivacyPolicies);
                groupItems.AddSimpleFor(m => m.CreatedDate);
            });
        }).ScrollingEnabled(true))
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.FirstName).SummaryType(SummaryType.Count);
        })
        )
        )
</div>

<script>
    // Handling row change for the applicant grid
    function onMainRowChanged(e) {
        const rowData = e.row && e.row.data;
        // You can add your custom logic here to handle row change
    }

    // Handle the initialization of a new row
    function onInitNewRow(e) {
        // You can initialize additional properties here if needed
    }


    // Updated approve action function with Notflix confirmation popup
    function approveApplicantAction() {
        Notiflix.Confirm.Show(
            'Confirm Approval', // Title of the dialog
            'Are you sure you want to approve this applicant?', // Message to the user
            'Approve', // Confirm button text
            'Cancel', // Cancel button text
            function () { // If "Approve" is clicked, proceed with the approval
                // Add your logic to approve the applicant here
                console.log("Applicant approved!");
                // You can trigger your approval logic or form submission here
            },
            function () { // If "Cancel" is clicked, do nothing
                console.log("Approval cancelled.");
            }
        );
    }

    function rejectApplicantAction() {
        Notiflix.Confirm.Show(
            'Confirm Rejection', // Title of the dialog
            'Are you sure you want to reject this applicant?', // Message to the user
            'Approve', // Confirm button text
            'Cancel', // Cancel button text
            function () { // If "Approve" is clicked, proceed with the approval
                // Add your logic to approve the applicant here
                console.log("Applicant approved!");
                // You can trigger your approval logic or form submission here
            },
            function () { // If "Cancel" is clicked, do nothing
                console.log("Approval cancelled.");
            }
        );
    }
</script>

