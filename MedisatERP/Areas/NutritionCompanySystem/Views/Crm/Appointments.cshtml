@using DevExtreme.AspNet.Mvc
@using MedisatERP.Models
@model AspNetUser

@{
    Layout = "_Layout";
    ViewData["Title"] = "Patients";
    var userId = Model.Id;

    Guid? companyId = Model?.CompanyId;

    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }
}

<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="calendar"></i>APPOINTMENTS</span></div>
</div>

<div class="card" style="padding:20px">
    @(
        Html.DevExtreme().DataGrid<Appointment>()
            .ID("gv_appointmentList")
            .ShowBorders(true)
            .DataSource(d => d.Mvc().Controller("AppointmentsAPI").LoadAction("Get").Key("AppointmentId").LoadParams(new { companyId = companyId })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete"))
            .Columns(columns =>
            {
                columns.AddFor(m => m.NutritionistId).Caption("Nutritionist Name").Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("AspNetUsersAPI").LoadAction("Get").Key("Id").LoadParams(new { companyId = companyId })).DisplayExpr("UserName").ValueExpr("Id")).CellTemplate(@<text><div><%- displayValue %></div></text>);
                columns.AddFor(m => m.ClientId).Caption("Client Name").Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("CompanyClientsAPI").LoadAction("Get").Key("Id").LoadParams(new { companyId = companyId })).DisplayExpr("ClientName").ValueExpr("Id")).CellTemplate(@<text><div><%- displayValue %></div></text>);
                columns.AddFor(m => m.ScheduledDate).Caption("Scheduled Date").Format("dd MMM, yyyy HH:mm:ss");
                columns.AddFor(m => m.Status).Caption("Status").AllowEditing(false);
                columns.AddFor(m => m.Priority).Caption("Priority").Lookup(lookup => lookup.DataSource(Enum.GetValues(typeof(MedisatERP.Areas.NutritionCompanySystem.Data.Enum.AppointmentPriority)).Cast<MedisatERP.Areas.NutritionCompanySystem.Data.Enum.AppointmentPriority>().Select(e => new { Name = e.ToString() })).DisplayExpr("Name").ValueExpr("Name")).CellTemplate(@<text><div><%- value %></div>  </text>);
                columns.AddFor(m => m.ReminderSent).Caption("Reminder Sent");
                columns.AddFor(m => m.ReminderSentAt).Caption("Reminder Sent At").Format("dd MMM, yyyy HH:mm:ss").AllowEditing(false);
                columns.AddFor(m => m.Notes).Caption("Notes");
                columns.AddFor(m => m.CreatedAt).Caption("Created At").Format("dd MMM, yyyy HH:mm:ss").AllowEditing(false);
                columns.AddFor(m => m.UpdatedAt).Caption("Updated At").Format("dd MMM, yyyy HH:mm:ss").AllowEditing(false );
                columns.AddFor(m => m.Duration).Caption("Duration (mins)").Lookup(lookup => lookup.DataSource(Enum.GetValues(typeof(MedisatERP.Areas.NutritionCompanySystem.Data.Enum.AppointmentDurations)).Cast<MedisatERP.Areas.NutritionCompanySystem.Data.Enum.AppointmentDurations>().Select(e => new { Name = e.ToString(), Value = (int)e })).DisplayExpr("Name").ValueExpr("Value")).CellTemplate(@<text><div><%- value %></div></text>);
                columns.AddFor(m => m.WorkplaceId).Caption("Appointment Venue").Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("WorkplaceLookupsAPI")  .LoadAction("WorkplaceLookupsLookup") .Key("Value")) .DisplayExpr("Text")  .ValueExpr("Value"))  .CellTemplate(@<text><div><%- displayValue %></div></text>);

                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(92)
                .Caption("Manage")
                .Name("ManageAppointmentsButton")
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                    b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
                });
            })
        .Paging(p => p.PageSize(10))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .FocusedRowEnabled(true)
        .HeaderFilter(f => f.Visible(true))
        .GroupPanel(p => p.Visible(false))
        .Grouping(g => g.AutoExpandAll(false))
        .OnInitNewRow("onInitNewRow")
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
        totalItems.AddFor(m => m.Client.ClientName).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems =>
        {
        groupItems.Add().SummaryType(SummaryType.Count);
        })
        )
        .Editing(e => e
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Patients")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        )
        )
</div>

<script>

     function getCompanyId() {
        var companyId = $("#txt_company").dxSelectBox("option", "value");
        return companyId;
    }

       function onInitNewRow(e) {
        e.data.CompanyId = '@companyId';
    }


</script>