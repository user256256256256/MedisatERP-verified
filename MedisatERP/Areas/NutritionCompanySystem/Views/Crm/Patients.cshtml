@using DevExtreme.AspNet.Mvc
@using MedisatERP.Models
@model AspNetUser

@{
    Layout = "_Layout";
    ViewData["Title"] = "Patients";
    var userId = Model.Id;

    Guid? companyId = Model?.CompanyId;

    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }
}

<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="users"></i> PATIENTS </span></div>
</div>

<script>
    window.jsPDF = window.jspdf.jsPDF;
</script>

<div class="card" id="userGrid">
    @(
        Html.DevExtreme().DataGrid<CompanyClient>()
        .ID("gv_patientList")
        .ShowBorders(true)
        .DataSource(d => d.Mvc().Controller("CompanyClientsAPI").LoadAction("Get").Key("Id").LoadParams(new { companyId = companyId })
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete"))
        .Columns(columns =>
        {
            columns.AddFor(m => m.ClientName).Caption("Name");
            columns.AddFor(m => m.Email).Caption("Email");
            columns.AddFor(m => m.PhoneNumber).Caption("Tel");
            columns.AddFor(m => m.Gender).Caption("Gender").Lookup(lookup => lookup.DataSource(Enum.GetValues(typeof(MedisatERP.Areas.AdministratorSystem.Data.Enum.Gender)).Cast<MedisatERP.Areas.AdministratorSystem.Data.Enum.Gender>().Select(e => new { Name = e.ToString() })).DisplayExpr("Name").ValueExpr("Name")).CellTemplate(@<text><div><%- value %></div>  </text>);
            columns.AddFor(m => m.DateOfBirth).Caption("DOB");
            columns.AddFor(m => m.EmergencyContactName).Caption("Emergency Contact Name");
            columns.AddFor(m => m.EmergencyContactPhone).Caption("Emergency Contact Phone");
            columns.AddFor(m => m.MaritalStatus).Caption("MaritialStatus").Lookup(lookup => lookup.DataSource(Enum.GetValues(typeof(MedisatERP.Areas.NutritionCompanySystem.Data.Enum.MaritialStatus)).Cast<MedisatERP.Areas.NutritionCompanySystem.Data.Enum.MaritialStatus>().Select(e => new { Name = e.ToString() })).DisplayExpr("Name").ValueExpr("Name")).CellTemplate(@<text><div><%- value %></div>  </text>);
            columns.AddFor(m => m.Nationality).Caption("Nationality").Lookup(lookup => lookup.DataSource(Enum.GetValues(typeof(MedisatERP.Areas.AdministratorSystem.Data.Enum.Countries)).Cast<MedisatERP.Areas.AdministratorSystem.Data.Enum.Countries>().Select(e => new { Name = e.ToString() })).DisplayExpr("Name").ValueExpr("Name")).CellTemplate(@<text><div><%- value %></div>  </text>);
            columns.AddFor(m => m.Street).Caption("Street");
            columns.AddFor(m => m.City).Caption("City");
            columns.AddFor(m => m.State).Caption("State");
            columns.AddFor(m => m.PostalCode).Caption("Postal Code");
            columns.AddFor(m => m.Country).Caption("Country").Lookup(lookup => lookup.DataSource(Enum.GetValues(typeof(MedisatERP.Areas.AdministratorSystem.Data.Enum.Countries)).Cast<MedisatERP.Areas.AdministratorSystem.Data.Enum.Countries>().Select(e => new { Name = e.ToString() })).DisplayExpr("Name").ValueExpr("Name")).CellTemplate(@<text><div><%- value %></div>  </text>);
            columns.AddFor(m => m.EmergencyContactRelationship).Caption("Emergency Contact Relationship");
            columns.AddFor(m => m.CreatedAt).Caption("Date Created").AllowEditing(false);
            columns.AddFor(m => m.UpdatedAt).Caption("Last Updated").AllowEditing(false);
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(92)
            .Caption("Manage")
            .Name("ManagePatientsButton")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Hint("Click for details").Icon("mediumiconslayout");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
        })
        .Paging(p => p.PageSize(10))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .FocusedRowEnabled(true)
        .HeaderFilter(f => f.Visible(true))
        .GroupPanel(p => p.Visible(false))
        .Grouping(g => g.AutoExpandAll(false))
        .RemoteOperations(true)
        .OnInitNewRow("onInitNewRow")
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems =>
        {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
        )
        .Editing(e => e
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Patients")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        )
        .Export(export => export
        .Enabled(true)
        .AllowExportSelectedData(true)
        .Formats(new[] { "pdf" })
        )
        .OnExporting("exportToPDF")
        )
</div>


<script>

    function exportToPDF(e) {
        var doc = new jsPDF({
            orientation: 'landscape',
            unit: 'pt',
            format: 'a3'
        });

        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: e.component,
            indent: 5,
            customizeCell: function (options) {
                if (options.gridCell.rowType === 'header') {
                    options.pdfCell.fontStyle = 'bold';
                }
                options.pdfCell.minWidth = options.gridCell.column.visibleWidth;
                options.pdfCell.styles = { fontSize: 8 };
                if (options.pdfCell.content) {
                    options.pdfCell.content = options.pdfCell.content.toString();
                }
                options.pdfCell.wordWrap = true;
            }
        }).then(function () {
            doc.save("MedisatPatients.pdf");
        });
    }

    function getCompanyId() {
        var companyId = $("#txt_company").dxSelectBox('option', 'value');
        return companyId;
    }

    function onInitNewRow(e) {
        e.data.CompanyId = '@companyId';
    }

</script>