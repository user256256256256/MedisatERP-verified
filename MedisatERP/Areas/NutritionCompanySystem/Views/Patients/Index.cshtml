@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.AdministratorSystem.Models
@using MedisatERP.Areas.NutritionCompanySystem.Models
@using MedisatERP.Models
@model AspNetUser
@{
    Layout = "_Layout";
    ViewData["Title"] = "Patients";

    Guid? companyId = Model?.CompanyId;

    // If companyId is not available from the Model, use ViewData
    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }


}


<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="users"></i> PATIENTS INFORMATION</span></div>
</div>



<!-- Client List DataGrid -->
<div class="card" style="padding:20px">
    @(Html.DevExtreme().DataGrid<CompanyClient>()
        .ShowBorders(true)
        .ID("gv_clientList")
        .DataSource(d => d.Mvc().Controller("CompanyClientsAPI").LoadAction("Get").Key("ClientId")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .LoadParams(new { companyId = companyId }) // Pass the CompanyId as load params
        )
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .FilterRow(f => f.Visible(false))
        .HeaderFilter(f => f.Visible(true))
        .RemoteOperations(true)
        .ShowBorders(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .OnFocusedRowChanged("onMainRowChanged")
        .OnInitNewRow("onInitNewRow")
        .Columns(columns =>
        {
            // Company Clients Data Columns
            columns.AddFor(m => m.ClientId).Caption("Patient ID").Visible(false);
            columns.AddFor(m => m.ClientName).Caption("Patient Name").Visible(true);
            columns.AddFor(m => m.DateOfBirth).Caption("Date of Birth").Format("dd MMM, yyyy");
            columns.AddFor(m => m.Gender).Caption("Gender").Visible(true);
            columns.AddFor(m => m.Email).Caption("Email").Visible(true);
            columns.AddFor(m => m.PhoneNumber).Caption("Phone").Visible(true);
            columns.AddFor(m => m.EmergencyContactName).Caption("Emergency Contact Name").Visible(true);
            // Add Emergency contact relationship
            columns.AddFor(m => m.EmergencyContactPhone).Caption("Emergency Contact Phone").Visible(true);
            columns.AddFor(m => m.MaritalStatus).Caption("Marital Status").Visible(true);
            columns.AddFor(m => m.Nationality).Caption("Nationality").Visible(true);
            columns.AddFor(m => m.CreatedAt).Caption("Date Created").Format("dd MMM, yyyy").AllowEditing(false);

            // Add column for Client Address --a foreign key in Company Clients Model
            columns.AddFor(m => m.AddressId).Caption("Address ID").Visible(false);
            columns.AddFor(m => m.Address.Street).Caption("Street").Visible(true);
            columns.AddFor(m => m.Address.City).Caption("City").Visible(true);
            columns.AddFor(m => m.Address.State).Caption("State").Visible(true);
            columns.AddFor(m => m.Address.PostalCode).Caption("Postal Code").Visible(true);
            columns.AddFor(m => m.Address.Country).Caption("Country").Visible(true);

            // Company Info
            columns.AddFor(m => m.CompanyId).Caption("Company ID").Visible(false);

            // Profile popup
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Caption("Profile")
            .Buttons(b =>
            {
                b.Add()
            .Hint("Click for details")
            .Icon("mediumiconslayout")
            .Visible(true)
            .OnClick("showClientProfile");
            });

            // Updated caption to make it unique
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Caption("Actions")  // Updated the caption to make it unique
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
        })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Client Management")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
            .Caption("Client Details")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {

                groupItems.AddSimpleFor(m => m.ClientName); // Distribute to Sir Name and Given name 
                groupItems.AddSimpleFor(m => m.DateOfBirth);
                groupItems.AddSimpleFor(m => m.Gender); // make a dropdown
                groupItems.AddSimpleFor(m => m.Email);
                groupItems.AddSimpleFor(m => m.PhoneNumber);
                groupItems.AddSimpleFor(m => m.Address.Street);
                groupItems.AddSimpleFor(m => m.Address.City);
                groupItems.AddSimpleFor(m => m.Address.State);
                groupItems.AddSimpleFor(m => m.Address.PostalCode);
                groupItems.AddSimpleFor(m => m.Address.Country);
                groupItems.AddSimpleFor(m => m.EmergencyContactName); 
                // Add Emergency contact relationship
                groupItems.AddSimpleFor(m => m.EmergencyContactPhone);
                groupItems.AddSimpleFor(m => m.MaritalStatus); // make a dropdown
                groupItems.AddSimpleFor(m => m.Nationality); // nationality
                groupItems.AddSimpleFor(m => m.CreatedAt).Visible(false);
                groupItems.AddSimpleFor(m => m.CompanyId).Visible(false);
            });
        }).ScrollingEnabled(true))
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);
        })
        )
        )
</div>



<div>
    @(
        Html.DevExtreme().Popup()  // Create a popup for new user account
        .ID("pop_client_profile")  // Set ID of the popup
        .Width("80%")  // Set width of the popup
        .Height("550")  // Set height of the popup
        .ShowTitle(true)  // Show title in the popup
                          //.ShadingColor("Purple")
        .Title("Client Profile")  // Set title of the popup
        .Visible(false)  // Initially hide the popup
        .ShowCloseButton(true)  // Show close button
        .DragEnabled(true)  // Enable dragging of the popup
        .DeferRendering(false)  // Disable deferred rendering for the popup content
        .OnContentReady(@<text>
        function(e) {
        const template = $('#embedded_client_profile');  // Select the embedded template
        e.component.option('contentTemplate', template);  // Set the popup content template
        }
    </text>) // This closes the OnContentReady and the popup method
        )
</div>

<div>
    @using (Html.DevExtreme().NamedTemplate("embedded_client_profile"))
    {
        @(Html.DevExtreme().TabPanel()  // Create a TabPanel widget
            .DeferRendering(false)  // Disables deferred rendering (loads all tabs at once)
            .Height("auto")  // Automatically adjusts the height of the TabPanel
            .ScrollingEnabled(true) // Enable scrolling
            .Items(tab =>  // Define tabs for the TabPanel
            {
                tab.Add()  // Add the first tab
                .Title("Profile Info 1")  // Set the title of the tab
                .Icon("fas fa-users")  // Set the icon for the tab
                .Template(new TemplateName("embedded_profile_info 1"));  // Set the template for the tab content

                tab.Add()  // Add the second tab
                .Title("Profile Info 2")  // Set the title of the tab
                .Icon("fas fa-credit-card")  // Set the icon for the tab
                .Template(new TemplateName("embedded_profile_info 2"));  // Set the template for the tab content

            })
            )
    }
</div>

<div>
    @using (Html.DevExtreme().NamedTemplate("embedded_profile_info 1"))
    {
        <div>
            <h1>CLIENT PROFILE INFORMATION TO BE INSERTED HERE</h1>
        </div>
    }
</div>

<div>
    @using (Html.DevExtreme().NamedTemplate("embedded_profile_info 2"))
    {
        <div>
            <h1>CLIENT PROFILE INFORMATION TO BE INSERTED HERE</h1>
        </div>
    }
</div>

<script>
    // Handling row change for the client grid
    function onMainRowChanged(e) {
        const rowData = e.row && e.row.data;
        // You can add your custom logic here to handle row change
    }

    // Handle the initialization of a new row
    function onInitNewRow(e) {
        e.data.CompanyId = '@companyId';
    }

    function showClientProfile() {
        const popup = $('#pop_client_profile').dxPopup('instance');  // Get the popup instance
        popup.show();  // Show the popup
    }

</script>
