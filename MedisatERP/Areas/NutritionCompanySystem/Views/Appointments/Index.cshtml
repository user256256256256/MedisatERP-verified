@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.AdministratorSystem.Models
@using MedisatERP.Areas.NutritionCompanySystem.Models
@using MedisatERP.Models
@model AspNetUser

@{
    Layout = "_Layout";
    ViewData["Title"] = "Appointments";

    Guid? companyId = Model?.CompanyId;

    // If companyId is not available from the Model, use ViewData
    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }
}

<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="calendar"></i> MANAGE PATIENTS APPOINTMENTS</span></div>
</div>

<div class="row mt-5 mb-2">
    <div class="col-md-4 form-group">
        <!-- Add New User Button -->
        @(Html.DevExtreme().Button()
            .Text("Schedule Appointment")
            .Icon("plus")
            .OnClick("function() { $('#schedule_popup').dxPopup('instance').show(); }")
            .Type(ButtonType.Normal)
            .Width("100%")
            )
    </div>
</div>

<!-- Appointments DataGrid -->
<div class="card" style="padding:20px">
    @(Html.DevExtreme().DataGrid<Appointment>()
        .ShowBorders(true)
        .ID("gv_appointmentsList")
        .DataSource(d => d.Mvc().Controller("AppointmentsAPI").LoadAction("Get").Key("AppointmentId")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .LoadParams(new { companyId = companyId }) // Pass the CompanyId as load params
        )
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .FilterRow(f => f.Visible(false))
        .HeaderFilter(f => f.Visible(true))
        .RemoteOperations(true)
        .ShowBorders(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .OnFocusedRowChanged("onMainRowChanged")
        .OnInitNewRow("onInitNewRow")
        .Columns(columns =>
        {
            // Client Info
            columns.AddFor(m => m.Client.ClientName).Caption("Client Name").Visible(true);

            // Appointment Data Columns
            columns.AddFor(m => m.AppointmentId).Caption("Appointment ID").Visible(false);
            columns.AddFor(m => m.ScheduledDate).Caption("Scheduled Date").Format("dd MMM, yyyy HH:mm:ss").Visible(true);
            columns.AddFor(m => m.Status).Caption("Status").Visible(true);
            columns.AddFor(m => m.Priority).Caption("Priority").Visible(true);
            columns.AddFor(m => m.ReminderSent).Caption("Reminder Sent").Visible(true);
            columns.AddFor(m => m.ReminderSentAt).Caption("Reminder Sent At").Format("dd MMM, yyyy HH:mm:ss").Visible(true);
            columns.AddFor(m => m.Notes).Caption("Notes").Visible(true);
            columns.AddFor(m => m.CreatedAt).Caption("Created At").Format("dd MMM, yyyy HH:mm:ss").Visible(true);
            columns.AddFor(m => m.UpdatedAt).Caption("Updated At").Format("dd MMM, yyyy HH:mm:ss").Visible(true);
            columns.AddFor(m => m.Duration).Caption("Duration (mins)").Visible(true);

            // Nutritionist Data Columns
            columns.AddFor(m => m.Nutritionist.UserName).Caption("Nutritionist Name").Visible(true);
            columns.AddFor(m => m.Nutritionist.Email).Caption("Nutritionist Email").Visible(true);
            columns.AddFor(m => m.Nutritionist.PhoneNumber).Caption("Nutritionist Phone Number").Visible(true);

            // Workplace Data Column
            columns.AddFor(m => m.Workplace.Workplace).Caption("Appointment Venue").Visible(true);

            // Manage Button Column (for Edit/Delete)
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Name("ManageButtons") // Add a unique name
            .Caption("Manage")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
        })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Appointment")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
            .Caption("Appointment Details")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.ScheduledDate);
                groupItems.AddSimpleFor(m => m.Status);
                groupItems.AddSimpleFor(m => m.Priority);
                groupItems.AddSimpleFor(m => m.ReminderSent);
                groupItems.AddSimpleFor(m => m.ReminderSentAt);
                groupItems.AddSimpleFor(m => m.Notes);
                groupItems.AddSimpleFor(m => m.CreatedAt).Visible(true);
                groupItems.AddSimpleFor(m => m.UpdatedAt).Visible(true);
                groupItems.AddSimpleFor(m => m.Duration);
            });

            // Group: Client Information
            items.AddGroup()
            .Caption("Client Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.Client.ClientName).Visible(true);
                groupItems.AddSimpleFor(m => m.Client.Email).Visible(true);
                groupItems.AddSimpleFor(m => m.Client.PhoneNumber).Visible(true);
            });

            // Group: Nutritionist Information
            items.AddGroup()
            .Caption("Nutritionist Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.Nutritionist.UserName).Visible(true);
                groupItems.AddSimpleFor(m => m.Nutritionist.Email).Visible(true);
                groupItems.AddSimpleFor(m => m.Nutritionist.PhoneNumber).Visible(true);
            });

            // Group: Workplace Information
            items.AddGroup()
            .Caption("Appointment Venue Info")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.Workplace.Workplace).Visible(true);
            });
        }).ScrollingEnabled(true))
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.Client.ClientName).SummaryType(SummaryType.Count);
        })
        )
        )
</div>

<div>
    @(Html.DevExtreme().Popup()
        .ID("schedule_popup")
        .Title("Schedule Appointment")
        .Width("60%")
        .Height("auto")
        .Visible(true)
        .ShowCloseButton(true)
        .ContentTemplate(@<text>
        <div class="row">
            <div class="form-group col-md-6 mb-3">
                <label>Client Name:</label>
                @(Html.DevExtreme().SelectBox()
                .ID("txt_client_name")
                .Width("100%")
                .DataSource(d => d.Mvc().Controller("CompanyClientsAPI").LoadAction("Get").Key("ClientId")
                .LoadParams(new { companyId = companyId }))
                .DisplayExpr("ClientName")
                .ValueExpr("ClientId")
                .Placeholder("Select Client")
                .SearchEnabled(true)
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Scheduled Date and Time:</label>
                @(Html.DevExtreme().DateBox()
                .ID("txt_scheduled_date")
                .Width("100%")
                .Placeholder("Select Scheduled Date and Time")
                .Type(DateBoxType.DateTime) // Enable date and time selection
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Status:</label>
                @(Html.DevExtreme().SelectBox()
                .ID("txt_status")
                .Width("100%")
                .DataSource(new[] { "Appointment Request", "Not Confirmed", "Confirmed", "Cancelled" })
                .Placeholder("Select Status")
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Priority:</label>
                @(Html.DevExtreme().SelectBox()
                .ID("txt_priority")
                .Width("100%")
                .DataSource(new[] { "Low", "Medium", "High" })
                .Placeholder("Select Priority")
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Notes:</label>
                @(Html.DevExtreme().TextArea()
                .ID("txt_notes")
                .Width("100%")
                .Placeholder("Enter Notes")
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Duration: (mins)</label>
                @(Html.DevExtreme().SelectBox()
                .ID("txt_duration")
                .Width("100%")
                .DataSource(new[] { "60", "30", "120" })
                .Placeholder("Select Duration (mins)")
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Nutritionist Name:</label>
                @(Html.DevExtreme().SelectBox()
                .ID("txt_nutritionist_name")
                .Width("100%")
                .DataSource(d => d.Mvc().Controller("AspNetUsersAPI").LoadAction("Get").Key("Id")
                .LoadParams(new { companyId = companyId }))
                .DisplayExpr("UserName")
                .ValueExpr("Id")
                .Placeholder("Select Nutritionist")
                .SearchEnabled(true)
                )
            </div>
            <div class="form-group col-md-6 mb-3">
                <label>Appointment Venue:</label>
                @(Html.DevExtreme().SelectBox()
                .ID("txt_appointment_venue")
                .Width("100%")
                .DataSource(d => d.Mvc().Controller("AppointmentsAPI").LoadAction("WorkplaceLookupsLookup").Key("Value"))
                .DisplayExpr("Text")
                .ValueExpr("Value")
                .Placeholder("Select Venue")
                .SearchEnabled(true) // Enable search functionality
                )
            </div>

            <div class="form-group col-md-12 mt-3">
                @(Html.DevExtreme().Button()
                .Text("Schedule Appointment")
                .Icon("todo")
                .Type(ButtonType.Normal)
                .Width("auto")
                .OnClick("function() { scheduleAppointment(); }")
                )
            </div>
        </div>
    </text>)
        )
</div>


<script>
    let compId = '@companyId'; // Assume companyId is set in your JavaScript environment

    // Handling row change for the client grid
    function onMainRowChanged(e) {
        const rowData = e.row && e.row.data;
        // You can add your custom logic here to handle row change
    }

    // Handle the initialization of a new row
    function onInitNewRow(e) {
        e.data.CompanyId = '@companyId';
    }

    function scheduleAppointment() {
        // Retrieve values from the input fields
        var clientId = $("#txt_client_name").dxSelectBox('option', 'value');
        var scheduledDate = $("#txt_scheduled_date").dxDateBox('option', 'value');
        var status = $("#txt_status").dxSelectBox('option', 'value');
        var priority = $("#txt_priority").dxSelectBox('option', 'value');
        var notes = $("#txt_notes").dxTextArea('option', 'value');
        var duration = $("#txt_duration").dxSelectBox('option', 'value');
        var nutritionistId = $("#txt_nutritionist_name").dxSelectBox('option', 'value');
        var appointmentVenue = $("#txt_appointment_venue").dxSelectBox('option', 'value');
        var companyId = compId; // Include the companyId

        // Prepare the values to be sent
        var values = JSON.stringify({
            ClientId: clientId,
            ScheduledDate: scheduledDate,
            Status: status,
            Priority: priority,
            Notes: notes,
            Duration: duration,
            NutritionistId: nutritionistId,
            WorkplaceId: appointmentVenue,
            CompanyId: companyId
        });

        // Log the values being sent to the console
        console.log("Values being sent to server:", values);

        // Define the API endpoint
        const url = `/api/AppointmentsAPI/Post?values=${encodeURIComponent(values)}`;

        // Show loading indicator
        Notiflix.Loading.Dots('Scheduling appointment...');

        // Make the AJAX request to schedule the appointment
        $.ajax({
            url: url,
            method: 'POST',
            contentType: 'application/json',
            success: function (json) {
                // Remove the loading indicator
                Notiflix.Loading.Remove(500);

                // Handle the success response
                if (json.success) {
                    // Show success message
                    Notiflix.Report.Success(
                        'Appointment Scheduled', json.message, 'OK',
                        function () {
                            // Close the appointment schedule popup
                            var popup = $("#schedule_popup").dxPopup("instance");
                            popup.hide();
                            // Refresh the data grid only after the user clicks 'OK'
                            var dataGrid = $("#gv_appointmentsList").dxDataGrid("instance");
                            dataGrid.refresh();
                        }
                    );
                } else {
                    // Report failure if it was unsuccessful
                    Notiflix.Report.Failure('Appointment Scheduling Failed', json.message, 'OK');
                }
            },
            error: function (jqxhr, textStatus, error) {
                // Remove the loading indicator on failure
                Notiflix.Loading.Remove(500);

                // Handle the error case
                var errorMessage = 'Failed to schedule appointment: ' + error; // Default message if responseJSON is unavailable

                if (jqxhr.responseJSON && jqxhr.responseJSON.message) {
                    errorMessage = jqxhr.responseJSON.message; // Use the message from the backend if available
                } else if (jqxhr.responseJSON && jqxhr.responseJSON.error) {
                    errorMessage = jqxhr.responseJSON.error; // Alternatively, check for error field
                } else if (jqxhr.responseJSON && jqxhr.responseJSON.errors) {
                    errorMessage = jqxhr.responseJSON.errors.map(function (err) { return err.description; }).join(', '); // Concatenate all error descriptions
                }

                // Show error message using Notiflix
                Notiflix.Report.Failure('Appointment Scheduling Failed', errorMessage, 'OK');
            }
        });
    }
</script>

