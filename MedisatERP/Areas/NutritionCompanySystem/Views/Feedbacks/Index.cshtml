@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.AdministratorSystem.Models
@using MedisatERP.Areas.NutritionCompanySystem.Models
@using MedisatERP.Models
@model AspNetUser

@{
    Layout = "_Layout";
    ViewData["Title"] = "Feedbacks";

    Guid? companyId = Model?.CompanyId;

    // If companyId is not available from the Model, use ViewData
    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }
}

<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="message-circle"></i> MANAGE FEEDBACKS</span></div>
</div>

<!-- Feedbacks DataGrid -->
<div class="card" style="padding:20px">
    @(Html.DevExtreme().DataGrid<Feedback>()
        .ShowBorders(true)
        .ID("gv_feedbackList")
        .DataSource(d => d.Mvc().Controller("FeedbacksAPI").LoadAction("Get").Key("FeedbackId")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .LoadParams(new { companyId = companyId }) // Pass the CompanyId as load params
        )
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .FilterRow(f => f.Visible(false))
        .HeaderFilter(f => f.Visible(true))
        .RemoteOperations(true)
        .ShowBorders(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .OnFocusedRowChanged("onMainRowChanged")
        .OnInitNewRow("onInitNewRow")
        .Columns(columns =>
        {
            // User Info
            columns.AddFor(m => m.User.UserName).Caption("User Name").Visible(true);
            columns.AddFor(m => m.User.Email).Caption("User Email").Visible(true);
            columns.AddFor(m => m.User.PhoneNumber).Caption("User Phone Number").Visible(true);

            // Feedback Data Columns
            columns.AddFor(m => m.FeedbackId).Caption("Feedback ID").Visible(false);
            columns.AddFor(m => m.FeedbackText).Caption("Feedback Text").Visible(true);
            columns.AddFor(m => m.Rating).Caption("Rating").Visible(true);
            columns.AddFor(m => m.Category).Caption("Category").Visible(true);
            columns.AddFor(m => m.SubmittedAt).Caption("Submitted At").Format("dd MMM, yyyy HH:mm:ss").Visible(true);
            columns.AddFor(m => m.Resolved).Caption("Resolved").Visible(true);

            // Manage Button Column (for Edit/Delete)
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Name("ManageButtons") // Add a unique name
            .Caption("Manage")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
        })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Feedback")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
            .Caption("Feedback Details")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.FeedbackText);
                groupItems.AddSimpleFor(m => m.Rating);
                groupItems.AddSimpleFor(m => m.Category);
                groupItems.AddSimpleFor(m => m.SubmittedAt);
                groupItems.AddSimpleFor(m => m.Resolved);
            });

            // Group: User Information
            items.AddGroup()
            .Caption("User Information")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.User.UserName).Visible(true);
                groupItems.AddSimpleFor(m => m.User.Email).Visible(true);
                groupItems.AddSimpleFor(m => m.User.PhoneNumber).Visible(true);
            });
        }).ScrollingEnabled(true))
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.User.UserName).SummaryType(SummaryType.Count);
        })
        )
        )
</div>

<script>
    // Handling row change for the feedback grid
    function onMainRowChanged(e) {
        const rowData = e.row && e.row.data;
        // You can add your custom logic here to handle row change
    }

    // Handle the initialization of a new row
    function onInitNewRow(e) {
        e.data.CompanyId = '@companyId';
    }

</script>
