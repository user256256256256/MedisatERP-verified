@using DevExtreme.AspNet.Mvc
@using MedisatERP.Areas.AdministratorSystem.Models
@using MedisatERP.Models
@model AspNetUser

@{
    Layout = "_Layout";
    ViewData["Title"] = "Activity Logs";

    Guid? companyId = Model?.CompanyId;

    // If companyId is not available from the Model, use ViewData
    if (companyId == null || companyId == Guid.Empty)
    {
        companyId = ViewData["CompanyId"] as Guid?;
    }
}

<!-- Section Title Card -->
<div class="card col-12 card-title-nutrition-system">
    <div><span><i data-feather="log-in"></i>ACTIVITY LOGS</span></div>
</div>

<!-- Activity Logs DataGrid -->
<div class="card" style="padding:20px">
    @(Html.DevExtreme().DataGrid<AuditLog>()
        .ShowBorders(true)
        .ID("gv_activityLogList")
        .DataSource(d => d.Mvc().Controller("AuditLogsAPI").LoadAction("Get").Key("AuditLogId")
        .LoadParams(new { companyId = companyId })) // Pass the CompanyId as load params
        .ShowColumnLines(false)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .FilterRow(f => f.Visible(false))
        .HeaderFilter(f => f.Visible(true))
        .RemoteOperations(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .Columns(columns =>
        {
            // Activity Log Data Columns
            columns.AddFor(m => m.AuditLogId).Caption("Log ID").Visible(false);
            columns.AddFor(m => m.User.UserName).Caption("User Name").Visible(true);
            columns.AddFor(m => m.Action).Caption("Action").Visible(true);
            columns.AddFor(m => m.Timestamp).Caption("Timestamp").Format("dd MMM, yyyy HH:mm:ss").Visible(true);
            columns.AddFor(m => m.Details).Caption("Details").Visible(true);
            columns.AddFor(m => m.IpAddress).Caption("IP Address").Visible(true);
            columns.AddFor(m => m.DeviceInfo).Caption("Device Info").Visible(true);
            columns.AddFor(m => m.EventType).Caption("Event Type").Visible(true);
            columns.AddFor(m => m.EntityAffected).Caption("Entity Affected").Visible(true);
            columns.AddFor(m => m.OldValue).Caption("Old Value").Visible(true);
            columns.AddFor(m => m.NewValue).Caption("New Value").Visible(true);
            columns.AddFor(m => m.ComplianceStatus).Caption("Compliance Status").Visible(true);


            // Manage Button Column (for Edit/Delete)
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(80)
            .Name("ManageButtons") // Add a unique name
            .Caption("Manage")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
        })
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .FocusedRowEnabled(true)
        .Editing(e => e
        .AllowAdding(false)  // Not allowing adding new activity logs
        .AllowUpdating(false)
        .AllowDeleting(true)  // Allow deleting logs if necessary
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Activity Log")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        .Form(f => f
        .ID("activityLogForm")
        .Items(items =>
        {
            // Group: Activity Log Details
            items.AddGroup()
            .Caption("Activity Log Details")
            .ColCount(2)
            .ColSpan(2)
            .Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.User.UserName).Visible(true);
                groupItems.AddSimpleFor(m => m.Action).Visible(true);
                groupItems.AddSimpleFor(m => m.Timestamp).Visible(true);
                groupItems.AddSimpleFor(m => m.Details).Visible(true);
                groupItems.AddSimpleFor(m => m.IpAddress).Visible(true);
                groupItems.AddSimpleFor(m => m.DeviceInfo).Visible(true);
                groupItems.AddSimpleFor(m => m.EventType).Visible(true);
                groupItems.AddSimpleFor(m => m.EntityAffected).Visible(true);
                groupItems.AddSimpleFor(m => m.OldValue).Visible(true);
                groupItems.AddSimpleFor(m => m.NewValue).Visible(true);
                groupItems.AddSimpleFor(m => m.ComplianceStatus).Visible(true);
            });
        })
        )
        )
        .Paging(p => p.PageSize(10))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.Action).SummaryType(SummaryType.Count);
        })
        )
        )
</div>

<script>
    // Handling row change for the activity log grid
    function onMainRowChanged(e) {
        const rowData = e.row && e.row.data;
        // You can add your custom logic here to handle row change
    }
</script>
