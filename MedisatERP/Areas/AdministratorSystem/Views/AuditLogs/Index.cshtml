@using DevExtreme.AspNet.Mvc
@using MedisatERP.Models
@using MedisatERP.Areas.AdministratorSystem.Data.Enum
@using System.ComponentModel.DataAnnotations;
@model AspNetUser

@{
    Layout = "_Layout";
    ViewData["Title"] = "Audit Logs";
    var userId = Model.Id;
}

<!-- Section Title Card -->
<div class="card col-12 card-title">
    <center><span><i data-feather="edit-2"></i> AUDIT LOGS</span></center>
</div>

<script>
    window.jsPDF = window.jspdf.jsPDF;
</script>

<div class="card" id="userGrid">
    @(
        Html.DevExtreme().DataGrid<AuditLog>()
        .ShowBorders(true)
        .DataSource(d => d.Mvc().Controller("AuditLogsAPI").LoadAction("Get").Key("Id")
        .DeleteAction("Delete"))
        .Columns(columns =>
        {
            columns.AddFor(m => m.User.UserName).Caption("User Name");
            columns.AddFor(m => m.Timestamp).Caption("Timestamp");
            columns.AddFor(m => m.Action).Caption("Action");
            columns.AddFor(m => m.ComplianceStatus).Caption("Compliant");
            columns.AddFor(m => m.EventType).Caption("Event Type");
            columns.AddFor(m => m.EntityAffected).Caption("Entity Affected");
            columns.AddFor(m => m.IpAddress).Caption("Ip Address");
            columns.AddFor(m => m.DeviceInfo).Caption("DeviceInfo");
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Caption("Manage")
            .Name("ManageAuditLogsButtons")
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit).Hint("Edit");
                b.Add().Hint("Details").Icon("fas fa-info-circle").OnClick("detailsPopup");
                b.Add().Name(GridColumnButtonName.Delete).Hint("Delete");
            });
        })
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(false))
        .SearchPanel(s => s.Visible(true).Width(250).Placeholder("Search..."))
        .ShowColumnLines(true)
        .ShowRowLines(false)
        .RowAlternationEnabled(true)
        .ColumnHidingEnabled(true)
        .ColumnAutoWidth(true)
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .FocusedRowEnabled(true)
        .HeaderFilter(f => f.Visible(true))
        .GroupPanel(p => p.Visible(false))
        .Grouping(g => g.AutoExpandAll(false))
        .RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.User.UserName).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems =>
        {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
        )
        .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(false)
        .AllowDeleting(true)
        .UseIcons(true)
        .Mode(GridEditMode.Popup)
        .Popup(p => p
        .Title("Audit Log")
        .Height(450)
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))
        )
        )
        )
        .Export(export => export
        .Enabled(true)
        .AllowExportSelectedData(true)
        .Formats(new[] { "pdf" })
        )
        .OnExporting("exportToPDF")
        )
</div>

<script>

     function exportToPDF(e) {
        var doc = new jsPDF({
            orientation: 'landscape',
            unit: 'pt',
            format: 'a3'
        });

        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: e.component,
            indent: 5,
            customizeCell: function (options) {
                if (options.gridCell.rowType === 'header') {
                    options.pdfCell.fontStyle = 'bold';
                }
                options.pdfCell.minWidth = options.gridCell.column.visibleWidth;
                options.pdfCell.styles = { fontSize: 8 };
                if (options.pdfCell.content) {
                    options.pdfCell.content = options.pdfCell.content.toString();
                }
                options.pdfCell.wordWrap = true;
            }
        }).then(function () {
            doc.save("PandollarAudits.pdf");
        });
    }

    function detailsPopup() {
        return true;
    }
</script>