using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using MedisatERP.Areas.CoreSystem.Models;
using Humanizer;
using Microsoft.AspNetCore.Http.HttpResults;
using System.Net;
using System.Net.Http.Json;
using System.Text.Json;
using Newtonsoft.Json.Linq;
using System.Text;
using System.Text.Unicode;
using System.Security.Cryptography.X509Certificates;

namespace MedisatERP.Controllers
{
    [Route("api/[controller]/[action]")]
    public class CompaniesAPIController : Controller
    {
        private MedisatErpDbContext _context;
        private readonly HttpClient _client;

        public CompaniesAPIController(MedisatErpDbContext context, HttpClient client) {
            _context = context;
            _client = client;
        }

        [HttpGet]
        public async Task<IActionResult> Get(DataSourceLoadOptions loadOptions)
        {
            var companies = _context.Companies
                                    .Include(c => c.Address)  // Ensure Address data is eagerly loaded
                                    .Select(i => new {
                                        i.CompanyId,
                                        i.CompanyName,
                                        i.ContactPerson,
                                        i.CompanyEmail,
                                        i.CompanyPhone,
                                        i.ExpDate,
                                        i.ApiCode,
                                        i.CompanyStatus,
                                        i.SubscriptionAmount,
                                        i.CompanyInitials,
                                        i.SmsAccount,
                                        i.PayAccount,
                                        i.PayBank,
                                        i.PayAccountName,
                                        i.Motto,
                                        i.CompanyType,
                                        i.CreatedAt,
                                        Address = new  {
                                            i.Address.AddressId,
                                            i.Address.Street,
                                            i.Address.City,
                                            i.Address.State,
                                            i.Address.PostalCode,
                                            i.Address.Country
                                        }
                                    });

            // Log raw data before any transformation
            var rawData = await companies.ToListAsync();
            string rawDataJson = JsonConvert.SerializeObject(rawData, Formatting.Indented);

            Console.WriteLine("Raw Data Before DataSourceLoader:");
            Console.WriteLine(rawDataJson);  // Log the data before applying any filters, sort, or pagination

            // Apply filtering, sorting, and paging
            var transformedData = await DataSourceLoader.LoadAsync(companies, loadOptions);

            // Log the data after DataSourceLoader processes it
            string transformedDataJson = JsonConvert.SerializeObject(transformedData, Formatting.Indented);
            Console.WriteLine("Transformed Data After DataSourceLoader:");
            Console.WriteLine(transformedDataJson);  // Log the transformed data that will be returned to the UI

            return Json(transformedData); // Return the processed data
        }

        [HttpPost]
        public async Task<IActionResult> Post(string values)
        {
            try
            {
                // Log the incoming request values
                Console.WriteLine("Received request values: " + values);

                // Deserialize the incoming values into a dictionary for easy processing
                var valuesDict = JsonConvert.DeserializeObject<IDictionary<string, object>>(values); // Corrected the type here

                // Extract the address data, which is nested under "Address"
                var addressData = valuesDict.ContainsKey("Address") ? valuesDict["Address"] as JObject : null;

                // Log the extracted address data
                Console.WriteLine("Extracted address data: " + JsonConvert.SerializeObject(addressData));

                // Create a new Company instance
                var model = new Company();

                // Extract company data, excluding the address data
                var companyData = valuesDict.Where(kv => kv.Key != "Address")
                                            .ToDictionary(kv => kv.Key, kv => kv.Value);

                // Populate the company model with the data (excluding address)
                Console.WriteLine("Extracted company data: " + JsonConvert.SerializeObject(companyData));
                PopulateModel(model, companyData); // Assuming this method fills the company fields

                // Ensure that Address is initialized
                if (model.Address == null)
                {
                    model.Address = new CompanyAddress();
                    Console.WriteLine("Initialized new Company with Address.");
                }

                // If we have address data, populate the address model
                if (addressData != null)
                {
                    Console.WriteLine("Address data found, populating address model...");

                    model.Address.Street = addressData["Street"]?.ToString();
                    model.Address.City = addressData["City"]?.ToString();
                    model.Address.State = addressData["State"]?.ToString();
                    model.Address.PostalCode = addressData["PostalCode"]?.ToString();
                    model.Address.Country = addressData["Country"]?.ToString();

                    // Log the populated address model before saving
                    Console.WriteLine("Populated address model: " + JsonConvert.SerializeObject(model.Address));
                }
                else
                {
                    Console.WriteLine("No address data found in request.");
                }

                // Ensure CreatedAt is set if it's not already
                if (model.CreatedAt == null)
                {
                    model.CreatedAt = DateTime.Now;
                    Console.WriteLine("Created Date has been set to: " + model.CreatedAt);
                }

                // Save the company model with the address
                _context.Companies.Add(model);
                await _context.SaveChangesAsync();

                // Log success
                Console.WriteLine("Company saved successfully. CompanyId: " + model.CompanyId);

                // Return the CompanyId as part of the response
                return Json(new { model.CompanyId });
            }
            catch (Exception ex)
            {
                // Log any unexpected exceptions
                Console.WriteLine("Error occurred: " + ex.Message);
                return StatusCode(500, "Internal server error.");
            }
        }


        [HttpPut]
        public async Task<IActionResult> Put(Guid key, string values)
        {
            try
            {
                // Log the incoming request values
                Console.WriteLine("Received request for update: " + key + ": " + values);

                // Retrieve the company model based on the key
                var model = await _context.Companies
                                          .Include(c => c.Address) // Include the address in the query
                                          .FirstOrDefaultAsync(item => item.CompanyId == key);

                if (model == null)
                    return StatusCode(404, "Company not found");

                // Deserialize the incoming values into a dictionary
                var valuesDict = JsonConvert.DeserializeObject<IDictionary<string, object>>(values);

                // Log data after deserialization
                //Console.WriteLine("Deserialized fields: " + JsonConvert.SerializeObject(valuesDict));

                // Extract the address data nested under "Address" key
                var addressData = valuesDict.ContainsKey("Address") ? valuesDict["Address"] as JObject : null;

                // If address data is found, update the address directly in the database
                if (addressData != null)
                {
                    Console.WriteLine("Address data found, updating address...");

                    // Update the company address directly
                    if (model.Address == null)
                    {
                        // If the company does not have an address, create a new one
                        model.Address = new CompanyAddress();
                        Console.WriteLine("Created new address for company.");
                    }

                    // Populate the address properties from the provided data
                    model.Address.Street = addressData["Street"]?.ToString();
                    model.Address.City = addressData["City"]?.ToString();
                    model.Address.State = addressData["State"]?.ToString();
                    model.Address.PostalCode = addressData["PostalCode"]?.ToString();
                    model.Address.Country = addressData["Country"]?.ToString();

                    // Log the updated address before saving
                    //Console.WriteLine("Updated address model: " + JsonConvert.SerializeObject(model.Address));
                }
                else
                {
                    Console.WriteLine("No address data found in the request.");
                }

                // Extract the company data (excluding the address part)
                var companyData = valuesDict.Where(kv => kv.Key != "Address")
                                            .ToDictionary(kv => kv.Key, kv => kv.Value);

                // Log the extracted company data
                //Console.WriteLine("Extracted company data: " + JsonConvert.SerializeObject(companyData));

                // Populate the company model with the new company data
                PopulateModel(model, companyData);  // Assuming this method fills in the company properties

                // Validate the model before saving
                if (!TryValidateModel(model))
                    return BadRequest(GetFullErrorMessage(ModelState));

                // Save the updated company (and address) in the database
                await _context.SaveChangesAsync();

                // Return a successful response
                return Ok();
            }
            catch (Exception ex)
            {
                // Log any unexpected exceptions
                Console.WriteLine("Error occurred: " + ex.Message);
                return StatusCode(500, "Internal Server error");
            }
        }



        [HttpDelete]
        public async Task<IActionResult> Delete(Guid key)
        {
            try
            {
                // Log the received key.
                Console.WriteLine($"Received key: {key}");

                // Fetch the company and check if it exists.
                var model = await _context.Companies
                                          .Include(c => c.Address)    // Eager load CompanyAddress to avoid separate query
                                          .FirstOrDefaultAsync(item => item.CompanyId == key);

                if (model == null)
                {
                    // Return a not found response if the company does not exist.
                    return NotFound($"Company with ID {key} not found.");
                }

                // Log the Company details (if necessary, but remove for production).
                //Console.WriteLine($"Company model: {JsonConvert.SerializeObject(model)}");

                // If the company has an associated address, remove it first
                if (model.Address != null)
                {
                    // Log the address details (be cautious about sensitive data).
                    //Console.WriteLine($"Address model: {JsonConvert.SerializeObject(model.Address)}");

                    // Remove the associated address.
                    _context.CompanyAddresses.Remove(model.Address);
                }

                // Now remove the company itself.
                _context.Companies.Remove(model);

                // Save changes to commit the deletions in one go.
                await _context.SaveChangesAsync();

                // Return a No Content status (204) to indicate successful deletion.
                return NoContent();  // No content is returned after successful deletion.
            }
            catch (Exception ex)
            {
                // Log the full exception with the stack trace for better troubleshooting.
                Console.WriteLine($"Error occurred: {ex.Message}, StackTrace: {ex.StackTrace}");

                // Return an internal server error response.
                return StatusCode(500, "An internal server error occurred. Please try again later.");
            }
        }

        private void PopulateModel(Company model, IDictionary values)
        {
            string COMPANY_ID = nameof(Company.CompanyId);
            string COMPANY_NAME = nameof(Company.CompanyName);
            string CONTACT_PERSON = nameof(Company.ContactPerson);
            string COMPANY_EMAIL = nameof(Company.CompanyEmail);
            string COMPANY_PHONE = nameof(Company.CompanyPhone);
            string EXP_DATE = nameof(Company.ExpDate);
            string API_CODE = nameof(Company.ApiCode);
            string COMPANY_STATUS = nameof(Company.CompanyStatus);
            string SUBSCRIPTION_AMOUNT = nameof(Company.SubscriptionAmount);
            string COMPANY_INITIALS = nameof(Company.CompanyInitials);
            string SMS_ACCOUNT = nameof(Company.SmsAccount);
            string PAY_ACCOUNT = nameof(Company.PayAccount);
            string PAY_BANK = nameof(Company.PayBank);
            string PAY_ACCOUNT_NAME = nameof(Company.PayAccountName);
            string MOTTO = nameof(Company.Motto);
            string COMPANY_TYPE = nameof(Company.CompanyType);
            string ADDRESS_ID = nameof(Company.AddressId);
            string CREATED_AT = nameof(Company.CreatedAt);

            // Populate basic fields for the Company model
            if (values.Contains(COMPANY_ID))
            {
                model.CompanyId = ConvertTo<System.Guid>(values[COMPANY_ID]);
            }

            if (values.Contains(COMPANY_NAME))
            {
                model.CompanyName = Convert.ToString(values[COMPANY_NAME]);
            }

            if (values.Contains(CONTACT_PERSON))
            {
                model.ContactPerson = Convert.ToString(values[CONTACT_PERSON]);
            }

            if (values.Contains(COMPANY_EMAIL))
            {
                model.CompanyEmail = Convert.ToString(values[COMPANY_EMAIL]);
            }

            if (values.Contains(COMPANY_PHONE))
            {
                model.CompanyPhone = Convert.ToString(values[COMPANY_PHONE]);
            }

            if (values.Contains(EXP_DATE))
            {
                model.ExpDate = values[EXP_DATE] != null ? Convert.ToDateTime(values[EXP_DATE]) : (DateTime?)null;
            }

            if (values.Contains(API_CODE))
            {
                model.ApiCode = Convert.ToString(values[API_CODE]);
            }

            if (values.Contains(COMPANY_STATUS))
            {
                model.CompanyStatus = Convert.ToString(values[COMPANY_STATUS]);
            }

            if (values.Contains(SUBSCRIPTION_AMOUNT))
            {
                model.SubscriptionAmount = values[SUBSCRIPTION_AMOUNT] != null ? Convert.ToDecimal(values[SUBSCRIPTION_AMOUNT], CultureInfo.InvariantCulture) : (decimal?)null;
            }

            if (values.Contains(COMPANY_INITIALS))
            {
                model.CompanyInitials = Convert.ToString(values[COMPANY_INITIALS]);
            }

            if (values.Contains(SMS_ACCOUNT))
            {
                model.SmsAccount = Convert.ToString(values[SMS_ACCOUNT]);
            }

            if (values.Contains(PAY_ACCOUNT))
            {
                model.PayAccount = Convert.ToString(values[PAY_ACCOUNT]);
            }

            if (values.Contains(PAY_BANK))
            {
                model.PayBank = Convert.ToString(values[PAY_BANK]);
            }

            if (values.Contains(PAY_ACCOUNT_NAME))
            {
                model.PayAccountName = Convert.ToString(values[PAY_ACCOUNT_NAME]);
            }

            if (values.Contains(MOTTO))
            {
                model.Motto = Convert.ToString(values[MOTTO]);
            }

            if (values.Contains(COMPANY_TYPE))
            {
                model.CompanyType = Convert.ToString(values[COMPANY_TYPE]);
            }

            if (values.Contains(ADDRESS_ID))
            {
                model.AddressId = ConvertTo<System.Guid>(values[ADDRESS_ID]);
            }

            if (values.Contains(CREATED_AT))
            {
                model.CreatedAt = values[CREATED_AT] != null ? Convert.ToDateTime(values[CREATED_AT]) : (DateTime?)null;
            }

        }

        private T ConvertTo<T>(object value) {
            var converter = System.ComponentModel.TypeDescriptor.GetConverter(typeof(T));
            if(converter != null) {
                return (T)converter.ConvertFrom(null, CultureInfo.InvariantCulture, value);
            } else {
                // If necessary, implement a type conversion here
                throw new NotImplementedException();
            }
        }

        private string GetFullErrorMessage(ModelStateDictionary modelState) {
            var messages = new List<string>();

            foreach(var entry in modelState) {
                foreach(var error in entry.Value.Errors)
                    messages.Add(error.ErrorMessage);
            }

            return String.Join(" ", messages);
        }
    }
}